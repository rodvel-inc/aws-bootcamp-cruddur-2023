# This OpenAPI (formerly known as Swagger) file describes the structure and endpoints of a RESTful API named "Cruddur Backend API"
# This OpenAPI file serves as a blueprint for developers, specifying endpoints, methods, parameters, request/response structures, and schemas used in the API. 
# It promotes consistency, clarity, and ease of integration when developing or consuming the API.

openapi: '3.0.2' #Specifies that this API conforms to the OpenAPI Specification version 3.0.2.
info: #Provides metadata about the API: title is the name of the API, and version is its version number.
  title: Cruddur Backend API
  version: '1.0'
    
servers: #Lists the base URL(s) of the API server(s). Here, the API is hosted at https://api.server.test/v1.
  - url: https://api.server.test/v1
paths:
  /api/activities/home: #Defines specific endpoints under /api/activities/home.
    get: #Specifies that a GET request to this endpoint returns a list (array) of activities (Activity schema).
      description: 'Return a feed of activity based on all users'
      tags:
        - activities
      responses:
        '200':
          description: Returns an array of activities"
          content:
            application/json:
              schema: #Uses components defined under schemas for the response structure.
                type: array
                items:
                  $ref: '#/components/schemas/Activity'
  /api/activities/search: #Defines an endpoint /api/activities/search that accepts a GET request.
    get:
      description: 'Return a feed of activity based on a search term'
      tags:
        - activities
      parameters: #Requires a query parameter term of type string for searching activities.
        - name: term
          in: query
          description: Search term used for full text search
          required: true
          schema:
            type: string
            example: "#100DaysOfCloud"
      responses:
        '200':
          description: Returns an array of activities"
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Activity' ##Sets the HTTP for successful requests (200 OK). The response body will be an array of activities (Activity schema).
  /api/activities: #Specifies an endpoint /api/activities that accepts a POST request to create a new activity.
    post:
      description: Create a new activitiy eg. Creating a Crud
      tags:
        - activities
      requestBody: #Requires a JSON object in the request body (handle, message, and ttl are expected fields).
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                handle:
                  type: string
                message:
                  type: string
                ttl:
                  type: string
      responses:
        '200':
          description: Returns a recently created activity"
          content:
            application/json:
              schema:
                type: object
                items:
                  $ref: '#/components/schemas/Activity' #Sets the HTTP for successful requests (200 OK). The response body will be an array of activities (Activity schema).
  /api/activities/@{handle}: #Defines an endpoint /api/activities/@{handle} where handle is a path parameter (username).
    get: # GET request retrieves activities specific to the user identified by handle.
      description: 'Return a feed of activity for a specific user'
      tags:
        - activities
      parameters:
        - name: handle
          in: path
          description: Handle (aka Username)
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Returns an array of activities"
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Activity' #Sets the HTTP for successful requests (200 OK). The response body will be an array of activities (Activity schema).
  /api/message_groups:
    get:
      description: 'Return a list of two way private conversations for the user'
      tags:
        - messages
      responses:
        '200':
          description: Returns an array of messages groups for a specific user
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/MessageGroup'
  /api/messages/@{handle}:
    get:
      description: 'Returns private communication between two users'
      tags:
        - messages
      parameters:
        - name: handle
          in: path
          description: Handle (aka Username)
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Returns an array of messages between two users
          content:
            application/json:
              schema:
                type: object
                items:
                  $ref: '#/components/schemas/Message'
  /api/messages:
    post:
      description: 'Create a direct message between two users'
      tags:
        - messages
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                user_receiver_handle:
                  type: string
      responses:
        '200':
          description: Return a single message
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Message'
  /api/activities/notifications:
    get:
      description: 'Returns a feed of activity for all people that I follow'
      tags:
        - activities
      parameters: []
      responses:
        '200':
          description: Returns an array of activities
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Activity'

components: #Defines reusable data structures (schemas) used throughout the API. Activity, Message, and MessageGroup are defined here with their respective properties.
  schemas:
    Activity:
      type: object
      properties:
        uuid:
          type: string
          example: 0056a369-4618-43a4-ad88-e7c371bf5582
        display_name:
          type: string
          example: "Andrew Brown"
        handle:
          type: string
          example: "andrewbrown"
        message:
          type: string
          example: "Who likes pineapple on their pizza?"
        replies_count:
          type: integer
          example: 5
        reposts_count:
          type: integer
          example: 2
        likes_count:
          type: integer
          example: 103
        created_at:
          type: string
          example: "2023-02-06T18:11:03+00:00"
        expires_at:
          type: string
          example: "2023-02-06T18:11:03+00:00"
    Reply:
      type: object
      properties:
        uuid:
          type: string
          example: 0056a369-4618-43a4-ad88-e7c371bf5582
        reply_to_activity_uuid:
          type: string
          example: 0056a369-4618-43a4-ad88-e7c371bf5582
        handle:
          type: string
          example: "andrewbrown"
        message:
          type: string
          example: "Who likes pineapple on their pizza?"
        replies_count:
          type: integer
          example: 5
        reposts_count:
          type: integer
          example: 2
        likes_count:
          type: integer
          example: 103
        created_at:
          type: string
          example: "2023-02-06T18:11:03+00:00"

    Message:
      type: object
      properties:
        uuid:
          type: string
          example: 0056a369-4618-43a4-ad88-e7c371bf5582
        display_name:
          type: string
          example: "Andrew Brown"
        handle:
          type: string
          example: "andrewbrown"
        message:
          type: string
          example: "Who likes pineapple on their pizza?"
        created_at:
          type: string
          example: "2023-02-06T18:11:03+00:00"
    MessageGroup:
      type: object
      properties:
        uuid:
          type: string
          example: 0056a369-4618-43a4-ad88-e7c371bf5582
        display_name:
          type: string
          example: "Worf"
        handle:
          type: string
          example: "worf"