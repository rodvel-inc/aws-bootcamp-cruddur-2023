version: "3.8" # Docker Compose file version

services: # Definition of services to be run in Docker containers
  backend-flask: # Service for the Flask backend application
    environment: # Environment variables passed to the container
      FRONTEND_URL: "https://3000-${GITPOD_WORKSPACE_ID}.${GITPOD_WORKSPACE_CLUSTER_HOST}" # URL for the frontend React application
      BACKEND_URL: "https://4567-${GITPOD_WORKSPACE_ID}.${GITPOD_WORKSPACE_CLUSTER_HOST}" # URL for the Flask backend application
    build: ./backend-flask  # Specifies the build context for the backend service inside the /backend-flask folder, the Dockerfile
    ports:
      - "4567:4567" # Maps port 4567 on the host to port 4567 in the container
    volumes:
      - ./backend-flask:/backend-flask # Maps the local directory ./backend-flask to /backend-flask in the container
  
  frontend-react-js: # Service for the React frontend application
    environment: # Environment variables passed to the container
      REACT_APP_BACKEND_URL: "https://4567-${GITPOD_WORKSPACE_ID}.${GITPOD_WORKSPACE_CLUSTER_HOST}" # URL for the Flask backend application
    build: ./frontend-react-js # Specifies the build context for the frontend service
    ports:
      - "3000:3000" # Maps port 3000 on the host to port 3000 in the container
    volumes:
      - ./frontend-react-js:/frontend-react-js # Maps the local directory ./frontend-react-js to /frontend-react-js in the container

  dynamodb-local:
    # https://stackoverflow.com/questions/67533058/persist-local-dynamodb-data-in-volumes-lack-permission-unable-to-open-databa
    # We needed to add user:root to get this working.
    user: root
    command: "-jar DynamoDBLocal.jar -sharedDb -dbPath ./data"
    image: "amazon/dynamodb-local:latest"
    container_name: dynamodb-local
    ports: # Map port 8000 on the host to port 8000 on the container
      - "8000:8000"
    volumes: # Mount a local directory to store DynamoDB Local data
      - "./docker/dynamodb:/home/dynamodblocal/data"
    working_dir: /home/dynamodblocal  # Set working directory inside the container
  
  db:
    image: postgres:13-alpine
    restart: always # Always restart the PostgreSQL container if it stops
    environment:  # Set environment variables for PostgreSQL username and password
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=password
    ports:   # Map port 5432 on the host to port 5432 on the container
      - '5432:5432'
    volumes: # Use a named volume to persist PostgreSQL data
      - db:/var/lib/postgresql/data

# the name flag is a hack to change the default prepend folder
# name when outputting the image names
networks: 
  internal-network: # Internal network for communication between containers
    driver: bridge # Specifies the network driver as bridge
    name: cruddur # Name of the network

volumes: # Define a named volume for PostgreSQL data persistence
  db:  # Use local driver for the named volume
    driver: local